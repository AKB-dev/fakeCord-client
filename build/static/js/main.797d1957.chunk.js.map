{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","openSocket","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","channelSelected","username","usertemp","temp","tempMessage","channels","messages","users","onChange","bind","assertThisInitialized","handlePseudo","handleChange","handleMessage","_this2","on","user","setState","concat","channel","author","content","to","wishper","rename","i","message","event","target","value","preventDefault","emit","tab","filter","word","join","listChan","length","split","tabBegin","commandMsg","undefined","commandName","commandCreate","commandJoin","_this3","map","react_default","a","createElement","className","_this4","onClick","getAttribute","type","affichChannels","id","affichMessage","affichMembers","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.797d1957.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport openSocket from 'socket.io-client';\nconst socket = openSocket('https://node-server-fakcord.herokuapp.com/');\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            channelSelected: '#General',\n            username: 'invité',\n            usertemp: '',\n            temp: '',\n            tempMessage: '',\n            channels: [],\n            messages: [],\n            users: []\n        }\n        this.onChange = this.onChange.bind(this);\n        this.handlePseudo = this.handlePseudo.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleMessage = this.handleMessage.bind(this);\n    }\n\n    componentDidMount() {\n\n        /*\n        * Connexion user au channel\n        */\n        socket.on('newuser', (user) => {\n            this.setState({\n                messages: this.state.messages.concat({\n                    channel: this.state.channelSelected,\n                    author: 'system',\n                    content: user.username + ' has joined the channel.',\n                    to: '',\n                    wishper: 'no'\n                })\n            })\n        });\n\n        /*\n        * Renomé direct \n        */\n        socket.on('renameuser', (user) => {\n            this.setState({\n                messages: this.state.messages.concat({\n                    channel: this.state.channelSelected,\n                    author: 'system',\n                    content: user.username + ' has evolved to ' + user.rename,\n                    to: '',\n                    wishper: 'no'\n                })\n            })\n        });\n\n        /*\n        * Deconnexion d'un utilisateur\n        */\n        socket.on('disuser', (user) => {\n            this.setState({\n                messages: this.state.messages.concat({\n                    channel: this.state.channelSelected,\n                    author: 'system',\n                    content: user.username + ' is gone forever',\n                    to: '',\n                    wishper: 'no'\n                })\n            })\n        });\n\n        /*\n        */\n        socket.on('listUsers', (user) => {\n            this.setState({ users: [] });\n            for (var i in user) {\n                this.setState({ users: this.state.users.concat(user[i]) });\n            }\n        })\n\n        /*\n        * Définir les messages\n        */\n        socket.on('newmsg', (message) => {\n            this.setState({\n                messages: this.state.messages.concat({\n                    channel: message.messages.messages.channel,\n                    author: message.messages.messages.author,\n                    content: message.messages.messages.content,\n                    to: message.messages.messages.to,\n                    wishper: message.messages.messages.wishper\n                })\n            })\n        })\n\n        /*\n        */\n        socket.on('listChannels', (channels) => {\n            this.setState({ channels: [] });\n            for (var i in channels) {\n                this.setState({ channels: this.state.channels.concat(channels[i]) });\n            }\n        })\n    }\n\n    /*\n    * Pour la connexion\n    */\n    onChange(event) {\n        this.setState({ usertemp: event.target.value })\n    }\n\n    handlePseudo(event) {\n        event.preventDefault();\n        socket.emit('login', { username: this.state.usertemp })\n        this.setState({ username: this.state.usertemp })\n    }\n\n    /*\n    * Fonction pour commande /msg\n    */\n    commandMsg(tab) {\n        tab = tab.filter(word => word !== tab[0]);\n        this.setState({\n            tempMessage: {\n                channel: this.state.channelSelected,\n                author: this.state.username,\n                content: tab.filter(word => word !== tab[0]).join(' '),\n                to: tab[0],\n                wishper: 'yes'\n            }\n        });\n    }\n\n\n    /*\n    * Fonction pour commande /nick changer pseudo\n    */\n    commandName(tab, event) {\n        socket.emit('rename', {\n            username: this.state.username,\n            rename: tab[1],\n        });\n        this.setState({ username: tab[1] });\n    }\n\n    /*\n    * Fonction pour commande /create \n    */\n    commandCreate(tab) {\n        var listChan = this.state.channels.filter(channel => channel === '#' + tab[1]);\n        if (listChan.length === 0) {\n            this.setState({\n                tempMessage: {\n                    channel: this.state.channelSelected,\n                    author: 'system',\n                    content: 'A new channel has been created : #' + tab[1],\n                    to: '',\n                    wishper: 'no'\n                }\n            });\n            socket.emit('newChannel', {\n                channel: tab[1]\n            })\n            socket.emit('newmessage', { messages: this.state.tempMessage });\n        }\n        if (listChan.length >= 1) {\n            this.setState({\n                tempMessage: {\n                    channel: this.state.channelSelected,\n                    author: 'system',\n                    content: 'Ce channel existe déjà',\n                    to: '',\n                    wishper: 'no'\n                }\n            });\n            socket.emit('newmessage', { messages: this.state.tempMessage });\n        }\n        return true;\n    }\n\n\n    commandJoin(tab) {\n        this.setState({ channelSelected: tab[1] })\n    }\n\n    \n\n\n\n    //Pour l'envoi de message\n    handleChange(event) {\n        this.setState({ temp: event.target.value });\n        var tab = event.target.value.split(' ');\n        var tabBegin = tab[0].split('');\n        if (tab[0] === '/msg') {\n            this.commandMsg(tab);\n            return false;\n        }\n        if (tab[0] === '/nick') {\n            return false;\n        }\n        if (tab[0] === '/create') {\n            return false;\n        }\n        if (tab[0] === '/join') {\n            return false;\n        }\n        if (tabBegin[0] !== \"/\") {\n            this.setState({\n                tempMessage: {\n                    channel: this.state.channelSelected,\n                    author: this.state.username,\n                    content: event.target.value,\n                    to: '',\n                    wishper: 'no'\n                }\n            })\n        }\n    }\n\n\n\n    //Confirmation du formulaire / envoi de message\n\n    handleMessage(event) {\n        event.preventDefault();\n        var tab = this.state.temp.split(' ');\n        if (tab[0] === '/nick') {\n            if (tab[1] !== undefined && tab[1] !== '') {\n                this.commandName(tab, event);\n            }\n            this.setState({ temp: '' });\n            return false;\n        }\n        if (tab[0] === '/create') {\n            if (tab[1] !== undefined && tab[1] !== '') {\n                this.commandCreate(tab);\n            }\n            this.setState({ temp: '' });\n            return false;\n        }\n        if (tab[0] === '/join') {\n            if (tab[1] !== undefined && tab[1] !== '') {\n                this.commandJoin(tab);\n            }\n        }\n        socket.emit('newmessage', { messages: this.state.tempMessage });\n        this.setState({ temp: '' });\n    }\n\n    \n    // Afficher les messages\n    \n    affichMessage() {\n        var tab = this.state.messages.filter(messages => messages.channel === this.state.channelSelected);\n        return tab.map(message => {\n            if (message.author === 'system') {\n                return <span className=\"msg\"><strong>{message.content} <br /></strong></span>\n            }\n            if (message.to !== '' && message.to === this.state.username) {\n                return <span className=\"msg\"><em>{message.author} wispered you </em> : {message.content} <br /></span>\n            }\n            if (message.to !== '' && message.author === this.state.username) {\n                return <span className=\"msg\"><em> yo sent a wishper {message.to}</em> : {message.content} <br /></span>\n            }\n            if (message.author !== 'system' && message.wishper === 'no') {\n                return <span className=\"msg\"><strong>{message.author}</strong> : {message.content} <br /></span>\n            }\n        });\n    }\n\n\n    \n    //Afficher les membres\n\n    affichMembers() {\n        return this.state.users.map(user => {\n            return <span className=\"users\"> {user}  </span>\n        });\n    }\n\n    \n    //Afficher les channels \n\n    affichChannels() {\n        return this.state.channels.map(channel => {\n            return <ul>\n                        <li\n                        className=\"channels\"\n                        value={channel}\n                        onClick={(event) => { this.setState({ channelSelected: event.target.getAttribute('value') }) }}>\n                        {channel} &nbsp;\n                        </li>\n                    </ul>\n        })\n    }\n\n\n\n    //Rendu\n    \n\n    render() {\n        if (this.state.username === 'invité') {\n            return (\n                <div className=\"intro\">\n                    <div className=\"username\">\n                        <h1>Welcome to FakeCord</h1>\n                        <div className=\"p-8\">\n                            <span className=\"label\">\n                                \n                            </span>\n                        </div>\n\n                        <form>\n                            <input className='chat-entry' type=\"text\" onChange={this.onChange} />\n                            <button className='btn' onClick={this.handlePseudo}>Enter</button>\n                        </form>\n                    </div>\n                </div>\n            )\n        }\n        if (this.state.username !== '') {\n            return (\n                <div className=\"App\">\n                    <div className='container'>\n                        <div className=\"flex justify-center py-8\">\n                            <div className=\"list-gannels\">\n                                <div className=\"\">\n                                    #Channels<br />\n                                    <ul>\n                                        <li>{this.affichChannels()}</li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"text-box\">\n                        <div className=\"\">\n                                    <em>Welcome {this.state.username} to {this.state.channelSelected}</em>\n                                </div>\n                            <div className=\"\">\n                                <div>\n                                    <div id=\"content\">\n                                        {this.affichMessage()}\n                                        <br />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"Chat-box\">\n                            <div className=\"\">\n                                <div className=\"members\">\n                                    #People\n                                    <ul>\n                                        <li>{this.affichMembers()}</li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"\">\n                        <span className=\"\">\n                            <div className=\"\">\n                                <form className=\"sendForm\">\n                                    <input type=\"text\" className=\"input-text\" id=\"msg\" value={this.state.temp} onChange={this.handleChange} />\n                                    <button className=\"btn\" onClick={this.handleMessage}>Envoyer</button>\n                                </form>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            )\n        }\n        return (<p> {this.state.username} has joined the channel</p>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}